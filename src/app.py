import json

import streamlit as st
from langchain_community.callbacks.streamlit import StreamlitCallbackHandler
from langchain_community.chat_message_histories import (
    StreamlitChatMessageHistory,
)

from chroma_loader import create_chroma_db, load_data
from model_handler import generate_answer

# ƒê∆∞·ªùng d·∫´n t·ªõi file CSV c·ªßa b·∫°n
file_path = "../data/news_data.csv"


def setup_page():
    """
    C·∫•u h√¨nh trang web c∆° b·∫£n
    """
    st.set_page_config(
        page_title="AI Assistant",
        page_icon="üí¨",
        layout="wide",
    )


setup_page()


# S·ª≠ d·ª•ng b·ªô nh·ªõ ƒë·ªám ƒë·ªÉ l∆∞u d·ªØ li·ªáu v√† c∆° s·ªü d·ªØ li·ªáu vector
@st.cache_data
def load_documents(file_path):
    return load_data(file_path)


@st.cache_resource
def initialize_vector_db(_documents):
    return create_chroma_db(documents=_documents, persist_directory="vector_db")


def remove_json_formatting(input_text):
    # Lo·∫°i b·ªè d·∫•u ```json v√† ``` n·∫øu ch√∫ng c√≥ trong input_text
    cleaned_text = input_text.strip("```json").strip("```").strip()
    return cleaned_text


# T·∫£i d·ªØ li·ªáu v√† c∆° s·ªü d·ªØ li·ªáu vector
documents = load_documents(file_path)
vector_db = initialize_vector_db(documents)

# Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("StockAI - T∆∞ v·∫•n Ch·ª©ng kho√°n")

# S·ª≠ d·ª•ng StreamlitChatMessageHistory ƒë·ªÉ qu·∫£n l√Ω l·ªãch s·ª≠ tr√≤ chuy·ªán
msgs = StreamlitChatMessageHistory(key="chat_messages")

# Kh·ªüi t·∫°o session_state cho l·ªãch s·ª≠ chat n·∫øu ch∆∞a c√≥
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": "T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?"}
    ]
    msgs.add_ai_message("T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?")


# T·∫£i file CSS v·ªõi encoding UTF-8
with open("style.css", encoding="utf-8") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)


with st.container(height=500):
    # st.markdown("<div class='chat-history'>", unsafe_allow_html=True)
    # Hi·ªÉn th·ªã l·ªãch s·ª≠ tr√≤ chuy·ªán
    for msg in st.session_state.messages:
        role = "assistant" if msg["role"] == "assistant" else "human"
        st.chat_message(role).write(msg["content"])
    # st.markdown("</div>", unsafe_allow_html=True)


# H√†m x·ª≠ l√Ω c√¢u h·ªèi v√† l∆∞u v√†o l·ªãch s·ª≠
def process_question(prompt):
    # Hi·ªÉn th·ªã tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
    # st.chat_message("human").write(prompt)
    msgs.add_user_message(prompt)
    st.session_state.messages.append({"role": "human", "content": prompt})
    #refresh page

    # G·ªçi AI ƒë·ªÉ x·ª≠ l√Ω tin nh·∫Øn v√† nh·∫≠n ph·∫£n h·ªìi
    # with st.chat_message("assistant"):
    st_callback = StreamlitCallbackHandler(st.container())

        # Chu·∫©n b·ªã l·ªãch s·ª≠ tr√≤ chuy·ªán ƒë·ªÉ g·ª≠i cho AI
    chat_history = [
        {"role": msg["role"], "content": msg["content"]}
        for msg in st.session_state.messages[:-1]
    ]

        # G·ªçi h√†m generate_answer
    response = generate_answer(vector_db, prompt)
    response = remove_json_formatting(response)

        # L∆∞u ph·∫£n h·ªìi c·ªßa AI v√†o l·ªãch s·ª≠ v√† hi·ªÉn th·ªã
    print(response)
    json_output = json.loads(response)
    answer_text = json_output["answer"]
    st.session_state.messages.append(
        {"role": "assistant", "content": answer_text}
    )
    msgs.add_ai_message(answer_text)
        # st.write(answer_text)
    st.experimental_rerun()


# ƒê·∫£m b·∫£o `user_input` ƒë∆∞·ª£c kh·ªüi t·∫°o trong session_state
if "user_input" not in st.session_state:
    st.session_state.user_input = ""

# H√†m ƒë·ªÉ reset gi√° tr·ªã input
def reset_user_input():
    st.session_state.user_input = ""

# Ph·∫ßn nh·∫≠p c√¢u h·ªèi
with st.container():
    st.markdown("<div class='input-container'>", unsafe_allow_html=True)
    prompt = st.text_input(
        "Nh·∫≠p c√¢u h·ªèi v·ªÅ ch·ª©ng kho√°n:",
        value=st.session_state.user_input,
        key="user_input",
        placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...",
        on_change=reset_user_input,  # Reset sau khi g·ª≠i c√¢u h·ªèi
    )
    if prompt:
        process_question(prompt)
    st.markdown("</div>", unsafe_allow_html=True)



# ƒêm th Huy b√©o nh∆∞ con 